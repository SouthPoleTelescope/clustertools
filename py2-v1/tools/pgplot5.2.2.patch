diff -Naur pgplot/drivers/pndriv.c pgplot_clustertools/drivers/pndriv.c
--- pgplot/drivers/pndriv.c	1999-03-26 20:06:23.000000000 -0600
+++ pgplot_clustertools/drivers/pndriv.c	2017-10-19 07:13:18.385176865 -0500
@@ -222,7 +222,7 @@
 	return;
   }
 
-  if (setjmp(png_ptr->jmpbuf)) { /* not really sure what I'm doing here... */
+  if (setjmp(png_jmpbuf(png_ptr))) { /* not really sure what I'm doing here... */
 	fprintf(stderr,"%s: error in libpng while writing file %s, plotting disabled\n", png_ident, filename);
 	png_destroy_write_struct(&png_ptr,&info_ptr);
 	dev->error = true;
diff -Naur pgplot/drivers.list pgplot_clustertools/drivers.list
--- pgplot/drivers.list	1999-05-04 00:02:15.000000000 -0500
+++ pgplot_clustertools/drivers.list	2017-10-13 16:20:38.239473833 -0500
@@ -37,14 +37,14 @@
 ! NEDRIV 0 /NEXT      Computers running NeXTstep operating system
   NUDRIV 0 /NULL      Null device (no output)				Std F77
 ! PGDRIV 0 /PGMF      PGPLOT metafile (new format, experimental)        Std F77
-! PNDRIV 1 /PNG       Portable Network Graphics file                    C
-! PNDRIV 2 /TPNG      Portable Network Graphics file - transparent background C
+  PNDRIV 1 /PNG       Portable Network Graphics file                    C
+  PNDRIV 2 /TPNG      Portable Network Graphics file - transparent background C
 ! PPDRIV 1 /PPM       Portable Pixel Map file, landscape
 ! PPDRIV 2 /VPPM      Portable PIxel Map file, portrait
-! PSDRIV 1 /PS        PostScript printers, monochrome, landscape	Std F77
-! PSDRIV 2 /VPS       Postscript printers, monochrome, portrait		Std F77
-! PSDRIV 3 /CPS       PostScript printers, color, landscape		Std F77
-! PSDRIV 4 /VCPS      PostScript printers, color, portrait		Std F77
+  PSDRIV 1 /PS        PostScript printers, monochrome, landscape	Std F77
+  PSDRIV 2 /VPS       Postscript printers, monochrome, portrait		Std F77
+  PSDRIV 3 /CPS       PostScript printers, color, landscape		Std F77
+  PSDRIV 4 /VCPS      PostScript printers, color, portrait		Std F77
 ! PXDRIV 0 /PRINTRONI Printronix P300 or P600 dot-matrix printer
 ! QMDRIV 1 /QMS       QUIC devices (QMS and Talaris), landscape		Std F77
 ! QMDRIV 2 /VQMS      QUIC devices (QMS and Talaris), portrait		Std F77
@@ -68,8 +68,8 @@
 ! WDDRIV 2 /VWD       X Window dump file, portrait
 ! WSDRIV 0 /WS        VAX workstations running VWS software		VMS
 ! X2DRIV 0 /XDISP     PGDISP or FIGDISP server for X workstations	C
-! XWDRIV 1 /XWINDOW   Workstations running X Window System		C
-! XWDRIV 2 /XSERVE    Persistent window on X Window System		C
+  XWDRIV 1 /XWINDOW   Workstations running X Window System		C
+  XWDRIV 2 /XSERVE    Persistent window on X Window System		C
 ! ZEDRIV 0 /ZETA      Zeta 8 Digital Plotter
 !
 ! The following drivers can only be used in PGPLOT installations on MS-DOS
diff -Naur pgplot/makemake pgplot_clustertools/makemake
--- pgplot/makemake	1999-05-04 17:35:43.000000000 -0500
+++ pgplot_clustertools/makemake	2017-10-04 10:20:10.000000000 -0500
@@ -1025,12 +1025,12 @@
 grivas.o : $(DRVDIR)/gadef.h
 grtv00.o : $(DRVDIR)/imdef.h
 pgxwin.o : $(DRVDIR)/pgxwin.h
-pndriv.o : ./png.h ./pngconf.h ./zlib.h ./zconf.h
+# pndriv.o : ./png.h ./pngconf.h ./zlib.h ./zconf.h
 
 x2driv.o figdisp_comm.o: $(DRVDIR)/commands.h
 
 
-cpg:	libcpgplot.a cpgplot.h cpgdemo 
+cpg:	libcpgplot.a libcpgplot.so cpgplot.h cpgdemo 
 	@echo ' '
 	@echo '*** Finished compilation of the C PGPLOT wrapper library ***'
 	@echo ' '
@@ -1050,6 +1050,13 @@
 	$(RANLIB) libcpgplot.a
 	rm -f cpg*.o
 
+libcpgplot.so: $(PG_SOURCE) pgbind
+	./pgbind $(PGBIND_FLAGS) -h -w $(PG_SOURCE)
+	$(CCOMPL) -c $(CFLAGC) cpg*.c
+	rm -f cpg*.c
+	gcc -shared  -o libcpgplot.so cpg*.o
+	rm -f cpg*.o
+
 cpgdemo: cpgplot.h $(SRC)/cpg/cpgdemo.c libcpgplot.a
 	$(CCOMPL) $(CFLAGD) -c -I. $(SRC)/cpg/cpgdemo.c
 	$(FCOMPL) -o cpgdemo cpgdemo.o $(CPGPLOT_LIB) $(LIBS)
diff -Naur pgplot/src/grpckg1.inc pgplot_clustertools/src/grpckg1.inc
--- pgplot/src/grpckg1.inc	1997-04-30 16:16:57.000000000 -0500
+++ pgplot_clustertools/src/grpckg1.inc	2017-10-03 15:33:57.000000000 -0500
@@ -26,7 +26,7 @@
 C
       INTEGER   GRIMAX, GRFNMX
       REAL      GRCXSZ, GRCYSZ
-      PARAMETER (GRIMAX = 8)
+      PARAMETER (GRIMAX = 100)
       PARAMETER (GRFNMX = 90)
       PARAMETER (GRCXSZ =  7.0, GRCYSZ =  9.0)
 C
diff -Naur pgplot/src/pgplot.inc pgplot_clustertools/src/pgplot.inc
--- pgplot/src/pgplot.inc	1997-02-26 16:11:45.000000000 -0600
+++ pgplot_clustertools/src/pgplot.inc	2017-10-03 15:34:05.000000000 -0500
@@ -4,7 +4,7 @@
 C Maximum number of concurrent devices (should match GRIMAX).
 C-----------------------------------------------------------------------
       INTEGER PGMAXD
-      PARAMETER (PGMAXD=8)
+      PARAMETER (PGMAXD=100)
 C-----------------------------------------------------------------------
 C Indentifier of currently selected device.
 C-----------------------------------------------------------------------
diff -Naur pgplot/sys_linux/clustertools.conf pgplot_clustertools/sys_linux/clustertools.conf
--- pgplot/sys_linux/clustertools.conf	1969-12-31 18:00:00.000000000 -0600
+++ pgplot_clustertools/sys_linux/clustertools.conf	2017-10-04 14:27:01.460396655 -0500
@@ -0,0 +1,143 @@
+# The GNU g77 FORTRAN compiler and Gnu gcc C compiler on an elf-system.
+#-----------------------------------------------------------------------
+
+# Optional: Needed by XWDRIV (/xwindow and /xserve) and
+#           X2DRIV (/xdisp and /figdisp).
+# The arguments needed by the C compiler to locate X-window include files.
+ 
+   XINCL=
+
+# Optional: Needed by XMDRIV (/xmotif).
+# The arguments needed by the C compiler to locate Motif, Xt and
+# X-window include files.
+ 
+   MOTIF_INCL="$XINCL"
+
+# Optional: Needed by XADRIV (/xathena).
+# The arguments needed by the C compiler to locate Xaw, Xt and
+# X-window include files.
+ 
+   ATHENA_INCL="$XINCL"
+
+# Optional: Needed by TKDRIV (/xtk).
+# The arguments needed by the C compiler to locate Tcl, Tk and
+# X-window include files.
+ 
+   TK_INCL="-I$SROOT/include $XINCL"
+
+# Optional: Needed by RVDRIV (/xrv).
+# The arguments needed by the C compiler to locate Rivet, Tcl, Tk and
+# X-window include files.
+ 
+   RV_INCL=""
+
+# Mandatory.
+# The FORTRAN compiler to use.
+ 
+   FCOMPL="$FC"
+
+# Mandatory.
+# The FORTRAN compiler flags to use when compiling the pgplot library.
+# (NB. makemake prepends -c to $FFLAGC where needed)
+ 
+   FFLAGC="-fPIC -O"
+
+# Mandatory.
+# The FORTRAN compiler flags to use when compiling fortran demo programs.
+# This may need to include a flag to tell the compiler not to treat
+# backslash characters as C-style escape sequences
+ 
+   FFLAGD="-fno-backslash"
+
+# Mandatory.
+# The C compiler to use.
+ 
+   CCOMPL="$CC"
+
+# Mandatory.
+# The C compiler flags to use when compiling the pgplot library.
+ 
+   CFLAGC="-Wall -Wno-unused-but-set-variable -Wno-incompatible-pointer-types -Wno-deprecated-declarations -fPIC -DPG_PPU -O -DUSE_INTERP_RESULT"
+
+# Mandatory.
+# The C compiler flags to use when compiling C demo programs.
+ 
+   CFLAGD="-Wall -Wno-incompatible-pointer-types -Wno-return-type -O"
+
+# Optional: Only needed if the cpgplot library is to be compiled.
+# The flags to use when running pgbind to create the C pgplot wrapper
+# library. (See pgplot/cpg/pgbind.usage)
+ 
+   PGBIND_FLAGS="bsd"
+
+# Mandatory.
+# The library-specification flags to use when linking normal pgplot
+# demo programs.
+ 
+   LIBS="-lX11"
+
+# Optional: Needed by XMDRIV (/xmotif).
+# The library-specification flags to use when linking motif
+# demo programs.
+ 
+   MOTIF_LIBS="-lXm -lXt $LIBS"
+
+# Optional: Needed by XADRIV (/xathena).
+# The library-specification flags to use when linking athena
+# demo programs.
+ 
+   ATHENA_LIBS="-lXaw -lXt -lXmu -lXext $LIBS"
+
+# Optional: Needed by TKDRIV (/xtk).
+# The library-specification flags to use when linking Tk demo programs.
+# Note that you may need to append version numbers to -ltk and -ltcl.
+ 
+   TK_LIBS="-L$SROOT/lib -ltk8.6 -ltcl8.6 -lpthread $LIBS -ldl"
+
+# Mandatory.
+# On systems that have a ranlib utility, put "ranlib" here. On other
+# systems put ":" here (Colon is the Bourne-shell do-nothing command).
+ 
+   RANLIB="ranlib"
+
+# Optional: Needed on systems that support shared libraries.
+# The name to give the shared pgplot library.
+ 
+   SHARED_LIB="libpgplot.so"
+
+# Optional: Needed if SHARED_LIB is set.
+# How to create a shared library from a trailing list of object files.
+ 
+   SHARED_LD="gcc -shared  -o $SHARED_LIB"
+
+# Optional:
+# On systems such as Solaris 2.x, that allow specification of the
+# libraries that a shared library needs to be linked with when a
+# program that uses it is run, this variable should contain the
+# library-specification flags used to specify these libraries to
+# $SHARED_LD
+ 
+   SHARED_LIB_LIBS=""
+
+# Optional:
+# Compiler name used on Next systems to compile objective-C files.
+ 
+   MCOMPL=""
+
+# Optional:
+# Compiler flags used with MCOMPL when compiling objective-C files.
+ 
+   MFLAGC=""
+
+# Optional: (Actually mandatory, but already defined by makemake).
+# Where to look for any system-specific versions of the files in
+# pgplot/sys. Before evaluating this script, makemake sets SYSDIR to
+# /wherever/pgplot/sys_$OS, where $OS is the operating-system name
+# given by the second command-line argument of makemake. If the
+# present configuration is one of many for this OS, and it needs
+# different modifications to files in pgplot/sys than the other
+# configurations, then you should create a subdirectory of SYSDIR,
+# place the modified files in it and change the following line to
+# $SYSDIR="$SYSDIR/subdirectory_name".
+ 
+   SYSDIR="$SYSDIR/clustertools_src"
diff -Naur pgplot/sys_linux/clustertools_src/grfileio.c pgplot_clustertools/sys_linux/clustertools_src/grfileio.c
--- pgplot/sys_linux/clustertools_src/grfileio.c	1969-12-31 18:00:00.000000000 -0600
+++ pgplot_clustertools/sys_linux/clustertools_src/grfileio.c	2017-10-04 11:18:00.375982410 -0500
@@ -0,0 +1,189 @@
+/*GRFILEIO -- Fast low-level UNIX I/O routines
+ * +
+ *
+ * GRFILEIO is a set of functions that makes fast, low-level Unix I/O routines
+ * available to a Fortran program.
+ *
+ *-------
+ * 2-Dec-92 - fastio.c: John L. Lillibridge, NOAA/NOS/OES Geosciences Lab
+ * 11-Nov-93 - Addition of seekf and warning by Remko Scharroo, DUT/SSR&T
+ * 17-May-94 - Nice manual
+ * 13-Oct-94 - Bits not required by PGPLOT stripped out; routine names
+ *            changed [TJP].
+ * 09-Nov-94 - Tidied and ported to Cray [mcs] (untested).
+ * 10-Nov-94 - Added GRFCH() routine to write FORTRAN CHARACTER sub-strings.
+ * 19-Jun-95 - File name "-" means stdout.
+ *-------
+ */
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <string.h>
+
+#ifdef PG_PPU
+#define GROFIL grofil_
+#define GRWFIL grwfil_
+#define GRCFIL grcfil_
+#define GRWFCH grwfch_
+#else
+#define GROFIL grofil
+#define GRWFIL grwfil
+#define GRCFIL grcfil
+#define GRWFCH grwfch
+#endif
+
+/*
+ **&GROFIL -- Open file for writing with GRFILEIO
+ *+
+ *     FUNCTION GROFIL (FNAME)
+ *     INTEGER GROFIL
+ *     CHARACTER*(*) FNAME
+ *
+ * Opens file FNAME for writing.
+ * GROFIL returns the file descriptor for use in subsequent calls to
+ * grwfil or grcfil. If GROFIL is negative, an error occurred while
+ * opening the file.
+ *
+ **
+ * Usage:
+ *
+ *     FD = GROFIL ('output_file')
+ *     CALL GRWFIL (FD, 4, ARRAY)
+ *
+ * Arguments:
+ *  FNAME  (input) : File name of the input or output file
+ *  GROFIL (output) : Contains the file descriptor on return. If GROFIL < 0
+ *                   an error occurred while opening the file.
+ *-
+ */
+int GROFIL(fname, fname_len)
+     char *fname;
+     int fname_len;
+{
+  char *name = fname;      /* C pointer to FORTRAN string */
+  int   slen = fname_len;  /* Length of the FORTRAN string */
+  char *buff=0;            /* Dynamically allocated copy of name[] */
+  int fd = -1;             /* File descriptor to be returned */
+/*
+ * Determine how long the FORTRAN string is by searching for the last
+ * non-blank character in the string.
+ */
+  while(slen>0 && name[slen-1]==' ')
+    slen--;
+/*
+ * Dynamically allocate a buffer to copy the FORTRAN string into.
+ */
+  buff = (char *) malloc((slen+1) * sizeof(char));
+  if(buff) {
+/*
+ * Make a C string copy of the FORTRAN string.
+ */
+    strncpy(buff, name, slen);
+    buff[slen] = '\0';
+/* 
+ * Check for stdout.
+ */
+    if (slen == 1 && buff[0] == '-') {
+      fd = 1;
+    } else {
+/*
+ * Open the file and return its descriptor.
+ */
+      fd = open(buff, O_WRONLY | O_CREAT | O_TRUNC, 0666);
+    }
+    free(buff);
+  } else {
+    fprintf(stderr, "grofil: Insufficient memory\n");
+  };
+  return fd;
+}
+
+/*
+ **&GRCFIL -- Close file from GRFILEIO access
+ *+
+ *     FUNCTION GRCFIL (FD)
+ *     INTEGER GRCFIL (FD)
+ *
+ * Closes the file with descriptor FD from GRFILEIO access. GRCFIL returns
+ * 0 when properly closed. Otherwise, use PERRORF to report the error.
+ * 
+ * Usage:
+ *      IOS = GRCFIL (FD)
+ * or:
+ *      CALL GRCFIL (FD)
+ *
+ * In the last case the return code is ignored.
+ *
+ * Arguments:
+ *  FD      (input) : File descriptor returned by GROFIL.
+ *  GRCFIL (output) : Error code or 0 on proper closing.
+ *-
+ */
+int GRCFIL(fd)
+     int *fd;
+{
+  if ((*fd) == 1) {
+    return 0;
+  } else{
+    return close(*fd);
+  }
+}
+
+/*
+ **&GRWFIL -- GRFILEIO write routine
+ *+
+ *     FUNCTION GRWFIL (FD, NBYTE, BUFFER)
+ *     INTEGER FD, NBYTE, GRWFIL
+ *     BYTE    BUFFER(NBYTE)
+ *
+ * Writes NBYTE bytes into the file associated by descriptor FD (which is
+ * returned by the GROFIL call. The array BUFFER contains the data that has
+ * to be written, but can (of course) also be associated with any other
+ * string, scalar, or n-dimensional array.
+ * The function returns the number of bytes actually written in GRWFIL. If
+ * GRWFIL < 0, a write error occurred.
+ *
+ * Arguments:
+ *  FD      (input) : File descriptor returned by GROFIL
+ *  NBYTE   (input) : Number of bytes to be written
+ *  BUFFER  (input) : Buffer containing the bytes that have to be written
+ *  GRWFIL (output) : Number of bytes written, or (if negative) error code.
+ *-
+ */
+int GRWFIL(fd, nbytes, buf)
+     int *fd, *nbytes;
+     char *buf;
+{
+  return write(*fd, (void *) buf, *nbytes);
+}
+
+/*
+ **&GRWFCH -- GRFILEIO write FORTRAN character STRING routine
+ *+
+ *     FUNCTION GRWFCH (FD, STRING)
+ *     INTEGER FD, GRWFCH
+ *     CHARACTER*(*) STRING
+ *
+ * Writes NBYTE bytes into the file associated by descriptor FD (which is
+ * returned by the GROFIL call). The string STRING contains the data that has
+ * to be written.
+ * The function returns the number of bytes actually written in GRWFCH. If
+ * GRWFCH < 0, a write error occurred.
+ *
+ * Arguments:
+ *  FD      (input) : File descriptor returned by GROFIL
+ *  STRING  (input) : String containing the characterst to be written
+ *  GRWFCH (output) : Number of bytes written, or (if negative) error code.
+ *-
+ */
+int GRWFCH(fd, buf, buf_len)
+     int *fd;
+     char *buf;
+     int buf_len;
+{
+  return write(*fd, (void *) buf, buf_len);
+}
diff -Naur pgplot/sys_linux/clustertools_src/grtermio.c pgplot_clustertools/sys_linux/clustertools_src/grtermio.c
--- pgplot/sys_linux/clustertools_src/grtermio.c	1969-12-31 18:00:00.000000000 -0600
+++ pgplot_clustertools/sys_linux/clustertools_src/grtermio.c	2017-10-04 11:18:07.400930740 -0500
@@ -0,0 +1,148 @@
+#ifndef _POSIX_SOURCE
+#define _POSIX_SOURCE
+#endif
+
+/* Support routines for terminal I/O. This module defines the following
+   Fortran-callable routines: GROTER, GRCTER, GRWTER, GRPTER. */
+
+#include <stdio.h>
+#include <termios.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+#ifdef PG_PPU
+#define GROTER groter_
+#define GRWTER grwter_
+#define GRCTER grcter_
+#define GRPTER grpter_
+#else
+#define GROTER groter
+#define GRWTER grwter
+#define GRCTER grcter
+#define GRPTER grpter
+#endif
+
+/* Open a channel to the device specified by 'cdev'.
+ *
+ * cdev      I    The name of the device to be opened
+ * ldev      I    Number of valid characters in cdev
+ * groter    O    The open channel number (-1 indicates an error)
+ */
+int GROTER(cdev, ldev, cdev_len)
+     char *cdev; int *ldev;
+     int cdev_len;
+{
+  int fd;        /* The returned file descriptor */
+  char name[64]; /* A copy of the given terminal device name */
+/*
+ * Make a copy of the given file if there is sufficient room in name[].
+ */
+  if(*ldev <= sizeof(name)-1) {
+    strncpy(name, cdev, *ldev);
+    name[*ldev] = '\0';
+  } else {
+    fprintf(stderr, "groter: Terminal file name too long.\n");
+    return -1;
+  };
+/*
+ * Open the terminal.
+ */
+  if((fd = open(name, 2)) == -1) {
+    perror(name);
+    return -1;
+  };
+  return fd;
+}
+
+
+/* Close a previously opened channel.
+ *
+ * fd        I    The channel number to be closed
+ */
+void GRCTER(fd)
+     int *fd;
+{
+  close(*fd);
+  return;
+}
+
+/* Write lbuf bytes from cbuf to the channel fd.  Data is written without
+ * any formating.
+ *
+ * fd        I    The channel number
+ * cbuf      I    Character array of data to be written
+ * lbuf      I/O  The number of bytes to write, set to zero on return
+ */
+void GRWTER(fd, cbuf, lbuf, cbuf_len)
+     int *fd; char *cbuf; int *lbuf; int cbuf_len;
+{
+   int nwritten = write (*fd, cbuf, *lbuf);
+   if (nwritten != *lbuf)
+     perror("Error writing to graphics device");
+   *lbuf = 0;
+   return;
+}
+
+/* Write prompt string on terminal and then read response.  This version
+ * will try to read lbuf characters.
+ *
+ * fd        I    The channel number
+ * cprom     I    An optional prompt string
+ * lprom     I    Number of valid characters in cprom
+ * cbuf      O    Character array of data read
+ * lbuf    I/O    The number of bytes to read, on return number read
+ */
+void GRPTER(fd, cprom, lprom, cbuf, lbuf, cprom_len, cbuf_len)
+     int *fd; char *cprom; int *lprom; char *cbuf; int *lbuf;
+     int cprom_len; int cbuf_len;
+{
+  char *buff = cbuf;   /* C pointer to FORTRAN string */
+  int ndone=0;         /* The number of characters read */
+  struct termios term; /* Terminal mode flags */
+/*
+ * Get the current set of terminal mode flags.
+ */
+   if(tcgetattr(*fd, &term)==0) {
+     struct termios saveterm; /* Saved terminal attributes */
+     int ntry;  /* The number of characters still to be read */
+     int nread; /* The number of characters read in one iteration */
+/*
+ * Save the existing terminal mode flags to be restored later.
+ */
+     saveterm = term;
+/*
+ * Enable raw single character input.
+ */
+     term.c_lflag &= ~ICANON;
+     term.c_cc[VMIN] = 1;
+/*
+ * Install the new terminal flags after first waiting for all pending
+ * output to be delivered to the terminal and after discarding any
+ * lingering input.
+ */
+     tcsetattr(*fd, TCSAFLUSH, &term);
+/*
+ * Prompt for input.
+ */
+     if(*lprom>0) write(*fd, cprom, *lprom);
+/*
+ * Read up to 'ntry' characters from the terminal.
+ */
+     ndone = 0;
+     ntry = *lbuf;
+     do {
+       nread = read(*fd, &buff[ndone], ntry);
+       ndone += nread;
+       ntry  -= nread;
+     } while(nread>0 && ntry>0);
+/*
+ * Restore the previous terminal mode flags.
+ */
+     tcsetattr(*fd, TCSAFLUSH, &saveterm);
+   };
+   *lbuf=ndone;
+   return;
+}
